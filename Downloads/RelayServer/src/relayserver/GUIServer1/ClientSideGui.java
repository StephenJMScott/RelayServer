/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package relayserver.GUIServer1;
import com.sun.xml.internal.ws.api.message.Message;
import java.io.*;
import java.net.*;
import javax.swing.JOptionPane;


/**
 *
 * @author StephenJMScott
 */
public class ClientSideGui extends javax.swing.JFrame {
    private static String host;
    private static int port;
    
    public DataOutputStream DataOut;
    
    


    /**
     * Creates new form ClientSideGui
     */
    public ClientSideGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblClientSide = new javax.swing.JLabel();
        lblIPAddress = new javax.swing.JLabel();
        lblPort = new javax.swing.JLabel();
        txtIPField = new javax.swing.JTextField();
        txtPortField = new javax.swing.JTextField();
        btnSetIPandPort = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessageArea = new javax.swing.JTextArea();
        btnSend = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtReturnArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblClientSide.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        lblClientSide.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblClientSide.setText("Client Side");

        lblIPAddress.setText("IP Address:");
        lblIPAddress.setToolTipText("");

        lblPort.setText("Port:");
        lblPort.setToolTipText("");

        btnSetIPandPort.setText("Set");
        btnSetIPandPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetIPandPortActionPerformed(evt);
            }
        });

        txtMessageArea.setColumns(20);
        txtMessageArea.setRows(5);
        jScrollPane1.setViewportView(txtMessageArea);

        btnSend.setText("Send Message");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        txtReturnArea.setColumns(20);
        txtReturnArea.setRows(5);
        jScrollPane2.setViewportView(txtReturnArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSend, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblIPAddress)
                            .addComponent(lblPort))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtIPField)
                            .addComponent(txtPortField, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(btnSetIPandPort))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 101, Short.MAX_VALUE)
                .addComponent(lblClientSide, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(lblClientSide, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIPAddress)
                    .addComponent(txtIPField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPort)
                    .addComponent(txtPortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSetIPandPort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSend)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSetIPandPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetIPandPortActionPerformed
        
        Boolean booIP=true, booPort=true;
        
            if(txtIPField.getText().length() >0 && txtPortField.getText().length() >0){ //Making Sure that both fields are filled in.
                // if statement with Regex for valid IP addresses or Localhost as the only acccepted entry
                if(txtIPField.getText().matches("\\A(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\z" )|| txtIPField.getText().equalsIgnoreCase("localhost")){
                  host = txtIPField.getText();   
                }else{
                    booIP=false;
                }
                
                if(txtPortField.getText().length()<5)// Ensuring the port number is within range of 0 - 9999.
                try{ //making sure the port is numeric only. 
                    port = Integer.parseInt(txtPortField.getText());
                }catch(Exception e){
                    booPort = false;
                }
                
                if(!booIP && !booPort){
                    JOptionPane.showMessageDialog(this, "Incorrect IP and Port Details");
                    txtIPField.setText("");
                    txtPortField.setText("");
                    txtIPField.requestFocus();
                }
                else if(!booIP && booPort){
                    JOptionPane.showMessageDialog(this, "Incorrect IP Details");
                    txtIPField.setText("");
                    txtIPField.requestFocus();
                }
                else if (booIP && !booPort){
                    JOptionPane.showMessageDialog(this, "Incorrect Port Details");
                    txtPortField.setText("");
                    txtPortField.requestFocus();
                }
                else if (booIP && booPort){
                    //set the connection up with the inputted variables//
                    
                    try{    //this sets the Socket to make the connection to the server. Multiple packets can be sent this way
                        Socket s = new Socket(host, port);
                        DataOut = new DataOutputStream(s.getOutputStream());
                    }catch(Exception e){
                        System.out.println("Working?");        
                    }
                    
                    JOptionPane.showMessageDialog(this, "Connection set!");
                    
                    
                    
                }
            
            
            }
            else
                JOptionPane.showMessageDialog(null, "Please input into both fields");
            
        
        
    }//GEN-LAST:event_btnSetIPandPortActionPerformed

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        try{
//                    Socket s = new Socket(host, port);
//                    DataOutputStream  DataOut = new DataOutputStream(s.getOutputStream());
                    Reader rd = new StringReader(txtMessageArea.getText());
                    BufferedReader br = new BufferedReader(rd);
                    String sout = br.readLine();
                    DataOut.writeUTF(sout);
                    
                    
                    }catch(Exception e){
                        System.out.println("Ports unavailable");
                    }
    }//GEN-LAST:event_btnSendActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientSideGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientSideGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientSideGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientSideGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientSideGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnSetIPandPort;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblClientSide;
    private javax.swing.JLabel lblIPAddress;
    private javax.swing.JLabel lblPort;
    private javax.swing.JTextField txtIPField;
    private javax.swing.JTextArea txtMessageArea;
    private javax.swing.JTextField txtPortField;
    private javax.swing.JTextArea txtReturnArea;
    // End of variables declaration//GEN-END:variables
}
